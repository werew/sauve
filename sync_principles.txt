

-------------------- 1 Conditions d'arrêt ----------------------------

1.1 Scanners 

Un thread de type "scanner" peut/doit se terminer lorsque le
traitement de tous les répertoires de l'arborescence a été terminé, ce
qui se traduit par l'état suivant: le buffer des répertoires est vide
et n'est pas susceptible d'être rempli.  Cet état se vérifie lorsque
ces deux conditions sont satisfaites:

    - le buffer des répertoires ne contiens aucune entrée à traiter

    - tous les autres threads "scanner" se sont terminés ou sont
      inactifs (ne sont pas en train de traiter des répertoires)

La deuxième condition assure qu'aucun nouveau répertoire puisse être
mis dans le buffer. 
 

1.2 Analyzer 

La condition d'arrêt des threads de type "analyzer" est très proche de
celle des "scanners". Un "analyzer" peut/doit se terminer lorsque le
traitement de tous les fichiers et répertoires de l'arborescence a été
terminé, ce qui se traduit par l'état suivant: le buffer des fichiers
est vide et n'est pas susceptible d'être rempli.  Cet état se vérifie
lorsque ces deux conditions sont satisfaites:

    - le buffer des fichiers ne contiens aucune entrée à traiter

    - les threads "scanner" ont terminés le traitement de tous les
      répertoires de l'arborescence

La deuxième condition est satisfaite lorsque les conditions d'arrêt
des "scanners" décrites ci-dessus sont vérifiées et assure qu'aucun
nouveau fichier puisse être mis dans le buffer.


------------------ 2 Synchronisation des threads ---------------------

2.1 Accès aux buffers

Le programme utilise trois FIFO:

    - folders_queue: une liste chainée contenant les répertoires à
      traiter
 
    - files_queue: un buffer circulaire contenant les fichiers à
      traiter

    - term_queue: une liste chainée contenant les Ids des threads
      terminés

À chacune de ces FIFO est associé un mutex et une ou plusieurs
conditions pour en garantir l'accès synchronisé.


2.1.1  Listes: folders_queue et term_queue

L'accès (en lecture ou écriture) à ces listes est soumis à
l'utilisation d'un mutex. Dans le cas d'un accès en lecture, si la
liste est vide le lecteur doit attendre une condition afin d'être
notifié lors d'une adjonction dans la liste. Après chaque adjonction
un écrivain doit de son côté notifier un des lecteurs en attente par
le biais d'un signal sur la condition. L'algorithme peut être ainsi
résumé:

    Lire element ( queue ): 
        Lock queue.mutex 

        tant que queue est vide:
            attendre queue.condition /* unlock/lock implicite */ 

        element := queue.pop() 
        Unlock queue.mutex 
        renvoyer element
         
    Écrire element ( queue, element ): 
        Lock queue.mutex 
        queue.push( element ) 
        Signal queue.condition
        Unlock queue.mutexn 
    

2.1.2 Buffer circulaire: files_queue

Étant donné que la taille d'un buffer circulaire est limitée, l'accès
synchronisé à cette structure de données comporte une légère
différence par rapport aux FIFO qu'on a vu avant.  Cette fois-ci un
écrivain peut avoir à attendre si le buffer est plein.  L'algorithme
est donc le même que celui utilisé pour les listes sauf qu'il y a une
condition supplémentaire qui permet à l'écrivain d'attendre lorsque le
buffer est plein, et d'être notifié dans le cas où un slot du buffer
ait été
libéré. L'algorithme peut être ainsi résumé:


    Lire element ( queue ): 
        Lock queue.mutex 

        tant que queue est vide:
            attendre queue.condition_lecture 

        element := queue.pop() 
        Signal queue.condition_ecriture 
        Unlock queue.mutex 
        renvoyer element


         
    Écrire element ( queue, element ): 
        Lock queue.mutex 

        tant que queue est plein: 
            attendre queue.condition_ecriture 

        queue.push( element )
        Signal queue.condition_lecture 
        Unlock queue.mutex


2.2 Arrêt des threads

Dans la première partie de ce document j'ai présenté les conditions
d'arrêt de chaque thread, il est maintenant temps de voir plus en
détail le mécanisme de synchronisation utilisé dans le programme pour
mettre en place les principes énoncés dans la première partie.

2.2.1 Scanner 

Un thread de type "scanner" vérifie ses conditions d'arrêt lorsqu'il a
terminé de traiter un répertoire et est en train de chercher un
nouveau répertoire à traiter. Pour être en mesure de connaître le
nombre de scanners actifs on introduit un compteur qui est initialisé
avec le nombre total des scanners et est:

    - décrémenté lorsqu'un scanner est en train de chercher un
      répertoire
    - incrémenté lorsqu'un scanner a obtenu un nouveau répertoire à
      traiter



Pour garantir la terminaison de tous les scanners, le premier scanner
à se terminer doit "libérer" tous les scanners inactives (en attende
de recevoir un répertoire) par le biais d'un signal.  L'algorithme de
lecture d'un répertoire peut être ainsi résumé;

    Obtenir repertoire ( queue ): 
        Lock queue.mutex
        queue.scanners_actives -= 1

        tant que queue est vide: 
            si queue.scanners_actives = 0:
            Broadcast signal queue.condition 
            Unlock queue.mutex
            terminer 
        sinon
            attendre queue.condition 

        element := queue.pop() 
        queue.scanners_actives += 1 
        Unlock queue.mutex
        renvoyer element


2.2.2 Analyzer

Pour tester ses conditions d'arrêt un analyzer doit pouvoir vérifier
si les scanners ont terminés de traiter tous les répertoires. Pour
cela on introduit une variable qui indique si le traitement des
répertoires a été complété et donc si le buffer des fichiers peut
recevoir ou non des nouveaux fichiers dans le futur. Cette variable
est initialisée à 1 et mise à 0 par les scanners lorsque le traitement
des répertoires a été terminé. Pour garantir la terminaison de touts
les analyzers, le premier scanner à se terminer doit "libérer" tous
les analyzers en attende de rececption d'un fichier, par le biais d'un
signal. Après cette considération le nouvel algorithme de lecture
d'un répertoire serait le suivant:

    Notifier analyzers (queue_files): 
        Lock queue_files
        queue_files.va_recevoir = 0 
        Broadcast signal queue_files.condition_lecture 
        Unlock queue_files

    Obtenir repertoire ( queue_folders, queue_files ): 
        Lock queue_folders.mutex 
        queue_folders.scanners_actives -= 1

        tant que queue_folders est vide:
            si queue_folders.scanners_actives = 0: 
                Broadcast signal queue_folders.condition 
                Unlock queue_folders.mutex 
                Notifier analyzers
                terminer 
            sinon:
                 attendre queue_folders.condition 

        element := queue_folders.pop() 
        queue_folders.scanners_actives += 1 
        Unlock queue_folders.mutex 
        renvoyer element

En ce qui concerne les analyzers, il suffit de tester si le buffer des
fichiers est vide et prendre en compte la valeur de la variable "va
recevoir" pour déterminer la condition d'arrêt.

    Obtenir fichier ( queue_files ): 
        Lock queue_files.mutex

        tant que queue_files est vide: 
            si queue_files.va_recevoir = 0:
                terminer 
            attendre queue_files.condition_lecture 

        element := queue_files.pop() 
        Signal queue_files.condition_ecriture 
        Unlock queue_files.mutex 
        renvoyer element
